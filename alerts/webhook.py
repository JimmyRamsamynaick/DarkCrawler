"""
Module d'alertes webhook pour DarkCrawler
Envoie des notifications via webhooks (Slack, Discord, etc.)
"""

import requests
import json
import logging
from typing import List, Dict, Optional, Any
from datetime import datetime
from dataclasses import dataclass
from enum import Enum


class WebhookType(Enum):
    """Types de webhooks support√©s"""
    SLACK = "slack"
    DISCORD = "discord"
    TEAMS = "teams"
    GENERIC = "generic"


@dataclass
class WebhookConfig:
    """Configuration pour un webhook"""
    url: str
    webhook_type: WebhookType
    name: str = "DarkCrawler Alert"
    timeout: int = 30
    retry_count: int = 3
    headers: Dict[str, str] = None
    
    def __post_init__(self):
        if self.headers is None:
            self.headers = {"Content-Type": "application/json"}


class WebhookAlertSender:
    """Gestionnaire d'alertes par webhook"""
    
    def __init__(self):
        """Initialise le gestionnaire de webhooks"""
        self.logger = logging.getLogger(__name__)
        self.webhooks = {}
    
    def add_webhook(self, name: str, config: WebhookConfig):
        """
        Ajoute un webhook
        
        Args:
            name: Nom du webhook
            config: Configuration du webhook
        """
        self.webhooks[name] = config
        self.logger.info(f"Webhook ajout√©: {name} ({config.webhook_type.value})")
    
    def remove_webhook(self, name: str):
        """
        Supprime un webhook
        
        Args:
            name: Nom du webhook
        """
        if name in self.webhooks:
            del self.webhooks[name]
            self.logger.info(f"Webhook supprim√©: {name}")
    
    def send_leak_alert(self, detections: List[Dict], source_url: str = "", 
                       webhook_names: List[str] = None, 
                       additional_info: Dict = None) -> Dict[str, bool]:
        """
        Envoie une alerte de fuite via webhooks
        
        Args:
            detections: Liste des d√©tections
            source_url: URL source de la fuite
            webhook_names: Noms des webhooks √† utiliser (tous si None)
            additional_info: Informations suppl√©mentaires
            
        Returns:
            Dict[str, bool]: R√©sultats d'envoi par webhook
        """
        if not detections:
            self.logger.warning("Aucune d√©tection √† envoyer")
            return {}
        
        # D√©terminer les webhooks √† utiliser
        target_webhooks = webhook_names or list(self.webhooks.keys())
        
        if not target_webhooks:
            self.logger.warning("Aucun webhook configur√©")
            return {}
        
        results = {}
        
        for webhook_name in target_webhooks:
            if webhook_name not in self.webhooks:
                self.logger.warning(f"Webhook non trouv√©: {webhook_name}")
                results[webhook_name] = False
                continue
            
            config = self.webhooks[webhook_name]
            
            try:
                # Cr√©er le payload selon le type de webhook
                payload = self._create_payload(config.webhook_type, detections, 
                                             source_url, additional_info)
                
                # Envoyer le webhook
                success = self._send_webhook(config, payload)
                results[webhook_name] = success
                
                if success:
                    self.logger.info(f"Alerte envoy√©e via {webhook_name}")
                else:
                    self.logger.error(f"√âchec envoi via {webhook_name}")
                    
            except Exception as e:
                self.logger.error(f"Erreur webhook {webhook_name}: {e}")
                results[webhook_name] = False
        
        return results
    
    def send_summary_report(self, summary_data: Dict, 
                          webhook_names: List[str] = None) -> Dict[str, bool]:
        """
        Envoie un rapport de synth√®se via webhooks
        
        Args:
            summary_data: Donn√©es de synth√®se
            webhook_names: Noms des webhooks √† utiliser
            
        Returns:
            Dict[str, bool]: R√©sultats d'envoi par webhook
        """
        target_webhooks = webhook_names or list(self.webhooks.keys())
        results = {}
        
        for webhook_name in target_webhooks:
            if webhook_name not in self.webhooks:
                results[webhook_name] = False
                continue
            
            config = self.webhooks[webhook_name]
            
            try:
                payload = self._create_summary_payload(config.webhook_type, summary_data)
                success = self._send_webhook(config, payload)
                results[webhook_name] = success
                
            except Exception as e:
                self.logger.error(f"Erreur rapport webhook {webhook_name}: {e}")
                results[webhook_name] = False
        
        return results
    
    def _send_webhook(self, config: WebhookConfig, payload: Dict) -> bool:
        """
        Envoie un webhook avec retry
        
        Args:
            config: Configuration du webhook
            payload: Donn√©es √† envoyer
            
        Returns:
            bool: Succ√®s de l'envoi
        """
        for attempt in range(config.retry_count):
            try:
                response = requests.post(
                    config.url,
                    json=payload,
                    headers=config.headers,
                    timeout=config.timeout
                )
                
                if response.status_code in [200, 201, 204]:
                    return True
                else:
                    self.logger.warning(
                        f"Webhook r√©ponse {response.status_code}: {response.text}"
                    )
                    
            except requests.exceptions.RequestException as e:
                self.logger.warning(f"Tentative {attempt + 1} √©chou√©e: {e}")
                
                if attempt < config.retry_count - 1:
                    # Attendre avant de r√©essayer
                    import time
                    time.sleep(2 ** attempt)  # Backoff exponentiel
        
        return False
    
    def _create_payload(self, webhook_type: WebhookType, detections: List[Dict], 
                       source_url: str, additional_info: Dict = None) -> Dict:
        """
        Cr√©e le payload selon le type de webhook
        
        Args:
            webhook_type: Type de webhook
            detections: Liste des d√©tections
            source_url: URL source
            additional_info: Informations suppl√©mentaires
            
        Returns:
            Dict: Payload format√©
        """
        if webhook_type == WebhookType.SLACK:
            return self._create_slack_payload(detections, source_url, additional_info)
        elif webhook_type == WebhookType.DISCORD:
            return self._create_discord_payload(detections, source_url, additional_info)
        elif webhook_type == WebhookType.TEAMS:
            return self._create_teams_payload(detections, source_url, additional_info)
        else:
            return self._create_generic_payload(detections, source_url, additional_info)
    
    def _create_slack_payload(self, detections: List[Dict], source_url: str, 
                             additional_info: Dict = None) -> Dict:
        """Cr√©e un payload Slack"""
        # D√©terminer la couleur selon la s√©v√©rit√©
        max_severity = self._get_max_severity(detections)
        color_map = {
            'critical': '#FF0000',
            'high': '#FF8C00',
            'medium': '#FFD700',
            'low': '#32CD32'
        }
        color = color_map.get(max_severity, '#808080')
        
        # Cr√©er les champs
        fields = [
            {
                "title": "Fuites d√©tect√©es",
                "value": str(len(detections)),
                "short": True
            },
            {
                "title": "S√©v√©rit√© maximale",
                "value": max_severity.upper(),
                "short": True
            }
        ]
        
        if source_url:
            fields.append({
                "title": "Source",
                "value": f"<{source_url}|{source_url}>",
                "short": False
            })
        
        # Ajouter les d√©tections principales
        critical_detections = [d for d in detections if d.get('severity') == 'critical']
        if critical_detections:
            detection_text = "\n".join([
                f"‚Ä¢ {d.get('type', 'Unknown')}: `{d.get('value', 'N/A')}`"
                for d in critical_detections[:5]
            ])
            if len(critical_detections) > 5:
                detection_text += f"\n... et {len(critical_detections) - 5} autres"
            
            fields.append({
                "title": "D√©tections critiques",
                "value": detection_text,
                "short": False
            })
        
        payload = {
            "attachments": [
                {
                    "color": color,
                    "title": "üö® DarkCrawler - Alerte de Fuite",
                    "text": f"D√©tection automatique de {len(detections)} fuite(s) de donn√©es sensibles",
                    "fields": fields,
                    "footer": "DarkCrawler Alert System",
                    "ts": int(datetime.now().timestamp())
                }
            ]
        }
        
        return payload
    
    def _create_discord_payload(self, detections: List[Dict], source_url: str, 
                               additional_info: Dict = None) -> Dict:
        """Cr√©e un payload Discord"""
        max_severity = self._get_max_severity(detections)
        
        # Couleurs Discord (d√©cimal)
        color_map = {
            'critical': 16711680,  # Rouge
            'high': 16753920,      # Orange
            'medium': 16776960,    # Jaune
            'low': 3329330         # Vert
        }
        color = color_map.get(max_severity, 8421504)  # Gris par d√©faut
        
        # Cr√©er l'embed
        embed = {
            "title": "üö® DarkCrawler - Alerte de Fuite",
            "description": f"D√©tection automatique de **{len(detections)}** fuite(s) de donn√©es sensibles",
            "color": color,
            "timestamp": datetime.now().isoformat(),
            "footer": {
                "text": "DarkCrawler Alert System"
            },
            "fields": [
                {
                    "name": "üìä Statistiques",
                    "value": f"**Fuites:** {len(detections)}\n**S√©v√©rit√© max:** {max_severity.upper()}",
                    "inline": True
                }
            ]
        }
        
        if source_url:
            embed["fields"].append({
                "name": "üåê Source",
                "value": f"[{source_url}]({source_url})",
                "inline": False
            })
        
        # Ajouter les d√©tections critiques
        critical_detections = [d for d in detections if d.get('severity') == 'critical']
        if critical_detections:
            detection_text = "\n".join([
                f"‚Ä¢ **{d.get('type', 'Unknown')}:** `{d.get('value', 'N/A')}`"
                for d in critical_detections[:5]
            ])
            if len(critical_detections) > 5:
                detection_text += f"\n... et {len(critical_detections) - 5} autres"
            
            embed["fields"].append({
                "name": "üî¥ D√©tections Critiques",
                "value": detection_text,
                "inline": False
            })
        
        payload = {
            "embeds": [embed]
        }
        
        return payload
    
    def _create_teams_payload(self, detections: List[Dict], source_url: str, 
                             additional_info: Dict = None) -> Dict:
        """Cr√©e un payload Microsoft Teams"""
        max_severity = self._get_max_severity(detections)
        
        # Couleurs Teams
        color_map = {
            'critical': 'attention',
            'high': 'warning',
            'medium': 'good',
            'low': 'accent'
        }
        theme_color = color_map.get(max_severity, 'default')
        
        payload = {
            "@type": "MessageCard",
            "@context": "https://schema.org/extensions",
            "summary": "DarkCrawler Alert",
            "themeColor": theme_color,
            "title": "üö® DarkCrawler - Alerte de Fuite",
            "text": f"D√©tection automatique de **{len(detections)}** fuite(s) de donn√©es sensibles",
            "sections": [
                {
                    "activityTitle": "Statistiques",
                    "facts": [
                        {
                            "name": "Fuites d√©tect√©es:",
                            "value": str(len(detections))
                        },
                        {
                            "name": "S√©v√©rit√© maximale:",
                            "value": max_severity.upper()
                        }
                    ]
                }
            ]
        }
        
        if source_url:
            payload["sections"][0]["facts"].append({
                "name": "Source:",
                "value": source_url
            })
        
        return payload
    
    def _create_generic_payload(self, detections: List[Dict], source_url: str, 
                               additional_info: Dict = None) -> Dict:
        """Cr√©e un payload g√©n√©rique"""
        payload = {
            "alert_type": "data_leak",
            "timestamp": datetime.now().isoformat(),
            "source_url": source_url,
            "detections_count": len(detections),
            "max_severity": self._get_max_severity(detections),
            "detections": detections
        }
        
        if additional_info:
            payload["additional_info"] = additional_info
        
        return payload
    
    def _create_summary_payload(self, webhook_type: WebhookType, 
                               summary_data: Dict) -> Dict:
        """
        Cr√©e un payload pour le rapport de synth√®se
        
        Args:
            webhook_type: Type de webhook
            summary_data: Donn√©es de synth√®se
            
        Returns:
            Dict: Payload format√©
        """
        if webhook_type == WebhookType.SLACK:
            return {
                "attachments": [
                    {
                        "color": "#36a64f",
                        "title": "üìä DarkCrawler - Rapport de Synth√®se",
                        "text": f"Rapport pour la p√©riode: {summary_data.get('period', 'N/A')}",
                        "fields": [
                            {
                                "title": "Scans effectu√©s",
                                "value": str(summary_data.get('total_scans', 0)),
                                "short": True
                            },
                            {
                                "title": "Sites analys√©s",
                                "value": str(summary_data.get('sites_analyzed', 0)),
                                "short": True
                            },
                            {
                                "title": "Fuites d√©tect√©es",
                                "value": str(summary_data.get('total_leaks', 0)),
                                "short": True
                            },
                            {
                                "title": "Taux de d√©tection",
                                "value": f"{summary_data.get('detection_rate', 0):.2%}",
                                "short": True
                            }
                        ],
                        "footer": "DarkCrawler Report System",
                        "ts": int(datetime.now().timestamp())
                    }
                ]
            }
        
        elif webhook_type == WebhookType.DISCORD:
            return {
                "embeds": [
                    {
                        "title": "üìä DarkCrawler - Rapport de Synth√®se",
                        "description": f"Rapport pour la p√©riode: **{summary_data.get('period', 'N/A')}**",
                        "color": 3329330,  # Vert
                        "timestamp": datetime.now().isoformat(),
                        "fields": [
                            {
                                "name": "üìà Statistiques",
                                "value": (
                                    f"**Scans:** {summary_data.get('total_scans', 0)}\n"
                                    f"**Sites:** {summary_data.get('sites_analyzed', 0)}\n"
                                    f"**Fuites:** {summary_data.get('total_leaks', 0)}\n"
                                    f"**Taux:** {summary_data.get('detection_rate', 0):.2%}"
                                ),
                                "inline": True
                            }
                        ],
                        "footer": {
                            "text": "DarkCrawler Report System"
                        }
                    }
                ]
            }
        
        else:
            return {
                "report_type": "summary",
                "timestamp": datetime.now().isoformat(),
                "data": summary_data
            }
    
    def _get_max_severity(self, detections: List[Dict]) -> str:
        """
        D√©termine la s√©v√©rit√© maximale des d√©tections
        
        Args:
            detections: Liste des d√©tections
            
        Returns:
            str: S√©v√©rit√© maximale
        """
        severity_order = ['critical', 'high', 'medium', 'low']
        
        for severity in severity_order:
            if any(d.get('severity') == severity for d in detections):
                return severity
        
        return 'low'
    
    def test_webhook(self, webhook_name: str) -> bool:
        """
        Teste un webhook
        
        Args:
            webhook_name: Nom du webhook √† tester
            
        Returns:
            bool: Succ√®s du test
        """
        if webhook_name not in self.webhooks:
            self.logger.error(f"Webhook non trouv√©: {webhook_name}")
            return False
        
        config = self.webhooks[webhook_name]
        
        # Cr√©er un payload de test
        test_payload = {
            "text": "üß™ Test de connexion DarkCrawler",
            "timestamp": datetime.now().isoformat()
        }
        
        if config.webhook_type == WebhookType.SLACK:
            test_payload = {
                "text": "üß™ Test de connexion DarkCrawler - Webhook fonctionnel ‚úÖ"
            }
        elif config.webhook_type == WebhookType.DISCORD:
            test_payload = {
                "content": "üß™ Test de connexion DarkCrawler - Webhook fonctionnel ‚úÖ"
            }
        
        try:
            success = self._send_webhook(config, test_payload)
            if success:
                self.logger.info(f"Test webhook {webhook_name} r√©ussi")
            else:
                self.logger.error(f"Test webhook {webhook_name} √©chou√©")
            return success
            
        except Exception as e:
            self.logger.error(f"Erreur test webhook {webhook_name}: {e}")
            return False


if __name__ == "__main__":
    # Test du module
    logging.basicConfig(level=logging.INFO)
    
    print("üîó Test du module WebhookAlertSender")
    
    # Cr√©er le gestionnaire
    webhook_sender = WebhookAlertSender()
    
    # Ajouter des webhooks de test (URLs fictives)
    slack_config = WebhookConfig(
        url="https://hooks.slack.com/services/TEST/TEST/TEST",
        webhook_type=WebhookType.SLACK,
        name="Test Slack"
    )
    
    discord_config = WebhookConfig(
        url="https://discord.com/api/webhooks/TEST/TEST",
        webhook_type=WebhookType.DISCORD,
        name="Test Discord"
    )
    
    webhook_sender.add_webhook("slack_test", slack_config)
    webhook_sender.add_webhook("discord_test", discord_config)
    
    # Test de d√©tections
    test_detections = [
        {
            'type': 'email',
            'value': 'admin@company.com',
            'severity': 'medium',
            'confidence': 0.95
        },
        {
            'type': 'password',
            'value': 'SuperSecret123',
            'severity': 'critical',
            'confidence': 0.88
        }
    ]
    
    print("‚úÖ Webhooks configur√©s")
    print("‚úÖ D√©tections de test pr√©par√©es")
    print("‚ÑπÔ∏è Pour tester l'envoi, configurez des URLs de webhook valides")