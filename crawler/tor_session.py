"""
Module de gestion des sessions Tor pour DarkCrawler
G√®re la connexion au r√©seau Tor via proxy SOCKS5
"""

import requests
import time
import random
import logging
from typing import Optional, Dict, Any
import socket
import subprocess
import sys

class TorSession:
    """Gestionnaire de session Tor pour acc√©der au dark web"""
    
    def __init__(self, 
                 proxy_host: str = "127.0.0.1", 
                 proxy_port: int = 9050,
                 control_port: int = 9051):
        """
        Initialise une session Tor
        
        Args:
            proxy_host: Adresse du proxy Tor (d√©faut: 127.0.0.1)
            proxy_port: Port du proxy SOCKS5 (d√©faut: 9050)
            control_port: Port de contr√¥le Tor (d√©faut: 9051)
        """
        self.proxy_host = proxy_host
        self.proxy_port = proxy_port
        self.control_port = control_port
        self.session = None
        self.logger = logging.getLogger(__name__)
        
        # Configuration des proxies
        self.proxies = {
            'http': f'socks5h://{proxy_host}:{proxy_port}',
            'https': f'socks5h://{proxy_host}:{proxy_port}'
        }
        
        # Headers par d√©faut pour l'anonymat
        self.default_headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:91.0) Gecko/20100101 Firefox/91.0',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'en-US,en;q=0.5',
            'Accept-Encoding': 'gzip, deflate',
            'DNT': '1',
            'Connection': 'keep-alive',
            'Upgrade-Insecure-Requests': '1'
        }
    
    def check_tor_connection(self) -> bool:
        """
        V√©rifie si Tor est accessible
        
        Returns:
            bool: True si Tor est accessible, False sinon
        """
        try:
            # Test de connexion au port SOCKS5
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(5)
            result = sock.connect_ex((self.proxy_host, self.proxy_port))
            sock.close()
            
            if result != 0:
                self.logger.error(f"Impossible de se connecter au proxy Tor sur {self.proxy_host}:{self.proxy_port}")
                return False
            
            self.logger.info("Connexion au proxy Tor r√©ussie")
            return True
            
        except Exception as e:
            self.logger.error(f"Erreur lors de la v√©rification de Tor: {e}")
            return False
    
    def get_tor_ip(self) -> Optional[str]:
        """
        R√©cup√®re l'adresse IP actuelle via Tor
        
        Returns:
            str: Adresse IP ou None en cas d'erreur
        """
        try:
            response = self.session.get(
                'http://httpbin.org/ip',
                timeout=30
            )
            if response.status_code == 200:
                ip = response.json().get('origin')
                self.logger.info(f"IP Tor actuelle: {ip}")
                return ip
        except Exception as e:
            self.logger.error(f"Impossible de r√©cup√©rer l'IP Tor: {e}")
        return None
    
    def create_session(self, user_agent: Optional[str] = None) -> requests.Session:
        """
        Cr√©e une nouvelle session avec configuration Tor
        
        Args:
            user_agent: User-Agent personnalis√© (optionnel)
            
        Returns:
            requests.Session: Session configur√©e pour Tor
        """
        session = requests.Session()
        session.proxies.update(self.proxies)
        
        # Configuration des headers
        headers = self.default_headers.copy()
        if user_agent:
            headers['User-Agent'] = user_agent
        
        session.headers.update(headers)
        
        # Configuration des timeouts et retry
        session.timeout = 30
        
        self.session = session
        self.logger.info("Session Tor cr√©√©e avec succ√®s")
        return session
    
    def get_new_identity(self) -> bool:
        """
        Demande une nouvelle identit√© Tor (nouvelle IP)
        
        Returns:
            bool: True si succ√®s, False sinon
        """
        try:
            # Tentative de connexion au port de contr√¥le Tor
            import telnetlib
            
            tn = telnetlib.Telnet(self.proxy_host, self.control_port, timeout=10)
            tn.write(b"AUTHENTICATE\r\n")
            tn.write(b"SIGNAL NEWNYM\r\n")
            tn.write(b"QUIT\r\n")
            tn.close()
            
            # Attendre que la nouvelle identit√© soit active
            time.sleep(10)
            
            self.logger.info("Nouvelle identit√© Tor demand√©e")
            return True
            
        except Exception as e:
            self.logger.warning(f"Impossible de changer d'identit√© Tor: {e}")
            return False
    
    def test_onion_connectivity(self) -> bool:
        """
        Test la connectivit√© aux services .onion
        
        Returns:
            bool: True si les services .onion sont accessibles
        """
        try:
            # Test avec DuckDuckGo onion (service stable)
            test_url = "https://3g2upl4pq6kufc4m.onion"
            
            if not self.session:
                self.create_session()
            
            response = self.session.get(test_url, timeout=30)
            
            if response.status_code == 200:
                self.logger.info("Connectivit√© .onion confirm√©e")
                return True
            else:
                self.logger.warning(f"Test .onion √©chou√©: {response.status_code}")
                return False
                
        except Exception as e:
            self.logger.error(f"Erreur test .onion: {e}")
            return False
    
    def safe_request(self, 
                    url: str, 
                    method: str = 'GET', 
                    delay: float = 2.0,
                    **kwargs) -> Optional[requests.Response]:
        """
        Effectue une requ√™te s√©curis√©e avec gestion d'erreurs
        
        Args:
            url: URL √† requ√™ter
            method: M√©thode HTTP (GET, POST, etc.)
            delay: D√©lai avant la requ√™te (secondes)
            **kwargs: Arguments suppl√©mentaires pour requests
            
        Returns:
            requests.Response: R√©ponse ou None en cas d'erreur
        """
        try:
            # D√©lai al√©atoire pour √©viter la d√©tection
            time.sleep(delay + random.uniform(0, 1))
            
            if not self.session:
                self.create_session()
            
            # Rotation al√©atoire du User-Agent
            user_agents = [
                'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:91.0) Gecko/20100101 Firefox/91.0',
                'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:91.0) Gecko/20100101 Firefox/91.0',
                'Mozilla/5.0 (X11; Linux x86_64; rv:91.0) Gecko/20100101 Firefox/91.0'
            ]
            
            headers = kwargs.get('headers', {})
            headers['User-Agent'] = random.choice(user_agents)
            kwargs['headers'] = headers
            
            # Effectuer la requ√™te
            response = self.session.request(method, url, timeout=30, **kwargs)
            
            self.logger.debug(f"Requ√™te {method} vers {url}: {response.status_code}")
            return response
            
        except requests.exceptions.Timeout:
            self.logger.warning(f"Timeout pour {url}")
        except requests.exceptions.ConnectionError:
            self.logger.warning(f"Erreur de connexion pour {url}")
        except Exception as e:
            self.logger.error(f"Erreur requ√™te {url}: {e}")
        
        return None
    
    def is_onion_url(self, url: str) -> bool:
        """
        V√©rifie si une URL est un service .onion
        
        Args:
            url: URL √† v√©rifier
            
        Returns:
            bool: True si c'est une URL .onion
        """
        return '.onion' in url.lower()
    
    def close(self):
        """Ferme la session Tor"""
        if self.session:
            self.session.close()
            self.logger.info("Session Tor ferm√©e")


def check_tor_installation() -> bool:
    """
    V√©rifie si Tor est install√© sur le syst√®me
    
    Returns:
        bool: True si Tor est install√©
    """
    try:
        # V√©rifier si tor est dans le PATH
        result = subprocess.run(['which', 'tor'], 
                              capture_output=True, 
                              text=True)
        return result.returncode == 0
    except:
        return False


def start_tor_if_needed() -> bool:
    """
    D√©marre Tor si n√©cessaire
    
    Returns:
        bool: True si Tor est d√©marr√© ou d√©j√† en cours
    """
    tor_session = TorSession()
    
    if tor_session.check_tor_connection():
        return True
    
    if not check_tor_installation():
        print("‚ùå Tor n'est pas install√©. Installez-le avec:")
        print("   macOS: brew install tor")
        print("   Ubuntu: sudo apt install tor")
        print("   Arch: sudo pacman -S tor")
        return False
    
    try:
        print("üîÑ D√©marrage de Tor...")
        subprocess.Popen(['tor'], 
                        stdout=subprocess.DEVNULL, 
                        stderr=subprocess.DEVNULL)
        
        # Attendre que Tor d√©marre
        for i in range(30):
            time.sleep(2)
            if tor_session.check_tor_connection():
                print("‚úÖ Tor d√©marr√© avec succ√®s")
                return True
            print(f"   Attente... ({i+1}/30)")
        
        print("‚ùå Impossible de d√©marrer Tor")
        return False
        
    except Exception as e:
        print(f"‚ùå Erreur lors du d√©marrage de Tor: {e}")
        return False


if __name__ == "__main__":
    # Test du module
    logging.basicConfig(level=logging.INFO)
    
    print("üï∏Ô∏è Test du module TorSession")
    
    # V√©rifier et d√©marrer Tor si n√©cessaire
    if not start_tor_if_needed():
        sys.exit(1)
    
    # Cr√©er une session de test
    tor = TorSession()
    
    if tor.check_tor_connection():
        session = tor.create_session()
        ip = tor.get_tor_ip()
        
        if ip:
            print(f"‚úÖ Connexion Tor r√©ussie - IP: {ip}")
        
        # Test connectivit√© .onion
        if tor.test_onion_connectivity():
            print("‚úÖ Services .onion accessibles")
        else:
            print("‚ö†Ô∏è Services .onion non accessibles")
    
    tor.close()